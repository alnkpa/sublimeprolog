{ "name": "Prolog",
  "scopeName": "source.prolog",
  "fileTypes": ["pl","pro"],
  "comment": "This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0. If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/.",
  "patterns": [
    { "include": "#comments" },
  	{ "name": "meta.clause.body.prolog",
  	  "begin": "(?<=\\))\\s*(:-)",
      "beginCaptures": {
          "1": { "name": "keyword.control.clause.bodybegin.prolog" }
      },
  	  "patterns": [
        { "include": "#comments" },
        { "include": "#builtin" },
        { "include": "#controlandkeywords" },
        { "include": "#atom" },
        { "include": "#variable" },
        { "include": "#constants" },
  	  	{ "name": "meta.clause.body.prolog",
  	  	  "match": "."
  	  	}
  	  ],
  	  "end": "[.^%]*(\\.)",
  	  "endCaptures": {
        "1": { "name": "keyword.control.clause.bodyend.prolog" }
  	  }
  	},
    { "name": "meta.clause.head.prolog",
      "begin": "^\\s*([a-zA-Z][a-zA-Z0-9_]*\\()(?=.*:-.*)",
      "beginCaptures": {
          "1": { "name": "entity.name.function.clause.headbegin.prolog" }
      },
      "patterns": [
        { "include": "#atom" },
        { "include": "#variable" },
        { "include": "#constants" }
      ],
      "end": "(\\))(?=\\s*:-)",
      "endCaptures": {
          "1": { "name": "entity.name.function.clause.headend.prolog" }
      }
    },
    { "name": "meta.dcg.head.prolog",
      "begin": "^\\s*([a-z][a-zA-Z0-9_]*\\()(?=.*-->.*)",
      "beginCaptures": {
          "1": { "name": "entity.name.function.dcg.headbegin.prolog" }
      },
      "patterns": [
        { "include": "#atom" },
        { "include": "#variable" },
        { "include": "#constants" }
      ],
      "end": "(\\))(?=\\s*-->)",
      "endCaptures": {
          "1": { "name": "entity.name.function.dcg.headend.prolog" }
      }
    },
    { "name": "meta.dcg.body.prolog",
      "begin": "(?<=\\))\\s*(-->)",
      "beginCaptures": {
          "1": { "name": "keyword.control.dcg.bodybegin.prolog" }
      },
      "patterns": [
        { "include": "#comments" },
        { "include": "#controlandkeywords" },
        { "include": "#atom" },
        { "include": "#variable" },
        { "include": "#constants" },
        {  "name": "meta.dcg.body.prolog",
           "match": "."
        }
      ],
      "end": "[.^%]*(\\.)",
      "endCaptures": {
          "1": { "name": "keyword.control.dcg.bodyend.prolog" }
      }
    },
  	{  "name": "entity.name.function.fact.prolog",
  	   "match": "\\s*[a-zA-Z][a-zA-Z0-9_]*\\([^\\.]*\\)[\\s^\\n]*\\.",
       "comment": "TODO match newlines"
  	}
  ],
  "repository": {
    "comments": {
      "patterns": [
        { "name": "comment.line.percent-sign.prolog",
          "match": "%.*"
        },
        { "name": "comment.block.prolog",
          "begin": "/\\*",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.prolog"
            }
          },
          "end": "\\*/"
        }
    ]
    },
    "controlandkeywords": {
      "patterns": [
        { "name": "meta.if.prolog",
        "begin": "(->)",
        "beginCaptures": {
            "1": { "name": "keyword.control.if.prolog" }
        },
        "patterns": [
          { "include": "$self" },
          { "include": "#builtin" },
          { "include": "#comments" },
          { "include": "#atom" },
          { "include": "#variable" },
          {  "name": "meta.if.body.prolog",
             "match": "."
          }
        ],
        "end": "(;)",
        "endCaptures": {
            "1": { "name": "keyword.control.else.prolog" }
        }
        },
        {  "name": "keyword.control.cut.prolog",
           "match": "!"
        },
        {  "name": "keyword.operator.prolog",
           "match": "(\\s(is)\\s)|=:=|==|=|\\\\\\+|>|<|\\+|\\*|\\-"
        }
      ]
    },
    "builtin": {
      "patterns": [
          { "name": "keyword.other",
            "match": "\\b(op|findall|write|nl|test)\\b"
          }
       ]
    },
    "constants": {
      "patterns": [
        {  "name": "constant.numeric.integer.prolog",
           "match": "(?<![a-zA-Z]|/)\\d+"
        },
        { "name": "string.quoted.double.prolog",
          "match": "\".*?\""
        }
      ]
    },
    "atom": {
      "patterns": [
        {  "name": "constant.other.atom.simple.prolog",
           "match": "(?<![a-zA-Z0-9_])[a-z][a-zA-Z0-9_]*(?!\\s*\\(|[a-zA-Z0-9_])"
        },
        {  "name": "constant.other.atom.quoted.prolog",
           "match": "'.*?'"
        },
        {  "name": "constant.other.atom.emptylist.prolog",
           "match": "\\[\\]"
        }
      ]
    },
    "variable": {
      "patterns": [
        {  "name": "variable.parameter.uppercase.prolog",
           "match": "(?<![a-zA-Z0-9_])[A-Z][a-zA-Z0-9_]*"
        },
        {  "name": "variable.language.anonymous.prolog",
           "match": "(?<!\\w)_"
        }
      ]
    }
  },
  "uuid": "df89928b-6612-475a-b414-f319d9b98664"
}
